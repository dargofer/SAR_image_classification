/*Date: 2021-10-23
Authors: Darwin Gómez Fernández, Rolando Salas López, Nilton B. Rojas Briceño, 
         honsy O. Silva López,Segundo M. Oliva Cruz and Miguel A. Barrena Gurbillón. 
Description: This script contains a quick and easy way to process and classify Sentinel-1 images,
              showing: collection import, metadata filtering, speckle reduction, 
              and classification using CART, Random Forest and SVM */


//////////////////////////**************** SENTINEL-1 IMAGE PREPARATION ******************/////////////
           // study area and training points

          // Parameters to form the combination
var polarization = "VH"; 
var flight_direction = "DESCENDING"; 
                  //Sentinel-1 GRD data 
var collection = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))
  .filter(ee.Filter.eq('orbitProperties_pass',flight_direction)) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterDate('2021-02-01', '2021-02-15')
  .filterBounds(AOI)
  .select(polarization);
// Extract date from meta data
      function dates(collection){
        var range = collection.reduceColumns(ee.Reducer.minMax(), ["system:time_start"]);
        var printed = ee.String('from ')
          .cat(ee.Date(range.get('min')).format('YYYY-MM-dd'))
          .cat(' to ')
          .cat(ee.Date(range.get('max')).format('YYYY-MM-dd'));
        return printed;
      }
      // print dates  images to console
      var before_count = collection.size();
      print(ee.String('Available images').cat('(').cat(before_count).cat(')'),
        dates(collection), collection);
        // Mosaic formation
var S1_mosaic = collection.mosaic().clip(AOI);
           // Apply reduce the radar speckle by smoothing  
var smoothing_radius = 30;
var S1_mosaic_filtered = S1_mosaic.focal_mean(smoothing_radius, 'circle', 'meters');
var s1_band = 'VH';
var vizParams = {
  bands: [s1_band,s1_band,s1_band],
  min: -25,
  max: 0,
  };
                         // Display S1-Images
Map.addLayer(S1_mosaic, vizParams, 'Unfiltered SAR image'); 
Map.addLayer(S1_mosaic_filtered, vizParams, 'SAR image filtered');
 
////////////////########### CLASSIFICATION with 3 algorithms******************///////////////////////////
                                
                                 // Parameters of clasification ////////////   
var bands = ['VH'];
var points = water.merge(No_Water);
var label = 'label';

var training = S1_mosaic_filtered.select(bands).sampleRegions({
  collection: points,
  properties: [label],
  scale: 10
});

                   //////////// CART //////////////
var classifier_CART = ee.Classifier.smileCart().train(training, label, bands);
var classified_CART = S1_mosaic_filtered.select(bands).classify(classifier_CART);

                  /////////// RF /////////////////
var classifierRF = ee.Classifier.smileRandomForest(10)
    .train({
      features: training,
      classProperty: 'label',
      inputProperties: ['VH']
    });

var classifiedRF = S1_mosaic_filtered.classify(classifierRF);

                ///// SVM //////////////////

var classifier = ee.Classifier.libsvm({
  kernelType: 'RBF',
  gamma: 0.5,
  cost: 10
});

var classifier_SVM = classifier.train(training, 'label', bands);
var classifiedsvm = S1_mosaic_filtered.classify(classifier_SVM);

                ///// Classification results ///////
var waterCart = classified_CART.mask(1);
var maskCart = waterCart.updateMask(waterCart);
Map.addLayer(maskCart,{palette:['Skyblue']},'CART',0);              

var waterRF = classifiedRF.mask(1);
var maskRF = waterRF.updateMask(waterRF);
Map.addLayer(maskRF,{palette:['Blue']},'RF',1);

var waterSVM = classifiedsvm.mask(1);
var maskSVM = waterSVM.updateMask(waterSVM);
Map.addLayer(maskSVM,{palette:['TURQUOISE']},'SVM',0);

               // Confusion matrix/////////
    // CART
var matrix_CART = classifier_CART.confusionMatrix();
print(matrix_CART,'MC de CART');
print(matrix_CART.kappa(), 'Kappa CART');
print(matrix_CART.accuracy(),'General CART');
    
    // Random
var matrix_RF = classifierRF.confusionMatrix();
print(matrix_RF,'MC de Random');
print(matrix_RF.kappa(), 'Kappa Random');
print(matrix_RF.accuracy(),'General Random');    
    
    // SVM
var matrix_SVM = classifier_SVM.confusionMatrix();
print(matrix_SVM,'MC de SVM');
print(matrix_SVM.kappa(), 'Kappa SVM');
print(matrix_SVM.accuracy(),'General SVM');
